1. Dijkstra算法（每次迭代找出一个最短距离进行更新）
    假设有m个样本，需要变量：
        权重图（以矩阵来表示图) dist mxm
        S集和（表示已找到的最短路径） founded  m维度向量,同时也是最后输出的向量
        U集和（当前最短路径状态） unfounded m维度向量
        路径 passpath一个二维列表

    每次迭代只需要m-1次，每次找到一个最短路径

    流程：
        初始化各个参数
        当迭代次数小于m-1:
            选取U集和中的距离最小值点
            将U集和中的距离最小值放入S集和中
            在距离最小值点基础上计算到其他节点距离，若更短则更新U集和，更新列表
        return 距离每个点的距离

2. MDS算法（保持样本在高维空间的距离与映射到低维空间后相等）
    输入：距离矩阵：dist, 低维空间维度：d
    输出：低维空间的坐标矩阵（缺点！！只得到了地位坐标）
    重点：如何对矩阵进行特征值分解

    过程：
    计算低维空间中的内积矩阵B
    对低维空间的内积矩阵B做特征分解
    通过特征分解得到低维空间的坐标表示

3. ISOMAP（等度量映射）
    ISOMAP=Dijkstra+MDS
    过程：
        选取k近邻距离构成稀疏图
        对稀疏图进行Dijkstra算法处理，构成全连接图，图的边值为点到点的最短路径
        对全连接图进行MDS降维

